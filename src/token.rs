use super::util;

#[derive(Debug, PartialEq, Clone)]
pub enum Token {
    Illegal,
    Eof,
    Ident(String),
    Int(String),
    Assign,
    Plus,
    Minus,
    Asterisk,
    Slash,
    Invert,
    Eq,
    NotEq,
    Lt,
    Gt,
    Comma,
    Semicolon,
    Lparen,
    Rparen,
    Lbrace,
    Rbrace,
    Function,
    Let,
    Return,
    True,
    False,
    If,
    Else,
}

pub fn lookup_token(sequence: &str) -> Token {
    let first_char = sequence.chars().next().unwrap();
    match sequence {
        "\0" => Token::Eof,
        "=" => Token::Assign,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Asterisk,
        "/" => Token::Slash,
        "!" => Token::Invert,
        "==" => Token::Eq,
        "!=" => Token::NotEq,
        "<" => Token::Lt,
        ">" => Token::Gt,
        "," => Token::Comma,
        ";" => Token::Semicolon,
        "(" => Token::Lparen,
        ")" => Token::Rparen,
        "{" => Token::Lbrace,
        "}" => Token::Rbrace,
        "fn" => Token::Function,
        "let" => Token::Let,
        "return" => Token::Return,
        "true" => Token::True,
        "false" => Token::False,
        "if" => Token::If,
        "else" => Token::Else,
        _ if first_char.is_ascii_digit() => Token::Int(String::new()),
        _ if util::is_identifier(first_char) => Token::Ident(String::new()),
        _ => Token::Illegal,
    }
}
